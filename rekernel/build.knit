local knit = require("knit")

function makedep(dc, s)
    return sel(dc == "gdc", f"-M -MF $s", f"-makedeps=$s")
end

function cmodel(dc, s)
    return sel(dc == "gdc", f"-mcmodel=$s", f"-code-model=$s")
end

local _, uconf = pcall(include, "conf.knit")

local arch = cli.arch or uconf.arch or "arm64"
local darch = string.upper(arch)

local dsrc = knit.join(
    knit.glob("*.d"),
    knit.glob(f"arch/$arch/*.d"),
    knit.glob("core/*.d"),
    knit.glob("alloc/*.d")
)

local csrc = knit.join(
    knit.glob("tinyprintf/*.c"),
    knit.glob("buddy/*.c")
)

local ssrc = knit.join(
    knit.glob("*.S"),
    knit.glob(f"arch/$arch/*.S")
)

local obj = knit.join(knit.extrepl(dsrc, ".d", ".o"), knit.extrepl(ssrc, ".S", ".o"), knit.extrepl(csrc, ".c", ".o"))
obj = knit.prefix(obj, ".")

local picolib := build/install

local dc = cli.dc or "ldc2"
local o = sel(dc == "gdc", "o", "of")

local platform = {
    amd64 := -mattr=-x87,-mmx,-sse
    arm64 := -mattr=-fp-armv8,-neon
}

local dflags = {
    gdc := -O2 -I$picolib/include -Wall -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti -fversion=$arch -ftransition=tls -mgeneral-regs-only -ffunction-sections -fdata-sections -fno-pic -g
    ldc2 := -O2 -I$picolib/include -betterC -d-version=$arch $(platform[arch]) -function-sections -data-sections -relocation-model=static -g
}

local flags = {
    dc = dflags[dc],
    ld := -nostdlib -L$picolib/lib -lc -lgcc -Wl,--gc-sections -fno-pic
}

if arch == "amd64" then
    flags.dc := $(flags.dc) $(cmodel(dc, "kernel"))
    flags.ld := $(flags.ld) -mcmodel=kernel
end

return b{
    $ kernel.elf: $obj link/kernel.out.ld[I] build/install/lib/libc.a[I]
        gcc $input -o $output -Tlink/kernel.out.ld -static $(flags.ld)

    $ .%.o:D[.%.dep]: %.d
        $(dc) $(makedep(dc, dep)) -c $input -$o $output $(flags.dc)
    $ .%.o: %.S
        gcc -c $input -o $output -D$darch
    $ .%.o: %.c
        gcc -nostdlib -ffreestanding -O2 -Wall -c $input -o $output -mgeneral-regs-only

    $ link/kernel.out.ld: link/kernel.ld
        cpp -P -D$darch $input > $output

    $ build/install/lib/libc.a:
        ./build-picolibc.sh
}
