local knit = require("knit")

local arch = cli.arch or "arm64"
local darch = string.upper(arch)

local dsrc = knit.join(
    knit.glob("*.d"),
    knit.glob(f"arch/$arch/*.d"),
    knit.glob("core/*.d"),
    knit.glob("alloc/*.d")
)

local ssrc = knit.join(
    knit.glob("*.S"),
    knit.glob(f"arch/$arch/*.S")
)

local obj = knit.join(knit.extrepl(dsrc, ".d", ".o"), knit.extrepl(ssrc, ".S", ".o"))
obj = knit.prefix(obj, ".")

local picolib := build/install
local flags := -Wall -nostdlib -O2 -I. -L$picolib/lib -I$picolib/include -lc -lgcc -D$darch

local flags = {
    dc := -O2 -Wall -nophoboslib -fno-exceptions -fno-moduleinfo -fno-rtti -I$picolib/include -fversion=$arch
    ld := -nostdlib -L$picolib/lib -lc -lgcc
}

if arch == "amd64" then
    flags.dc = flags.dc .. " -mcmodel=kernel -fno-pic"
    flags.ld = flags.ld .. " -mcmodel=kernel -fno-pic"
end

local dc = "gdc"

return b{
    $ kernel.elf: $obj link/kernel.out.ld[I]
        gcc $input -o $output -Tlink/kernel.out.ld -static $(flags.ld)

    $ .%.o:D[.%.dep]: %.d
        $(dc) -O2 -MM -MF $dep -c $input -o $output $(flags.dc)
    $ .%.o: %.S
        gcc -c $input -o $output -D$darch

    $ link/kernel.out.ld: link/kernel.ld
        cpp -P -D$darch $input > $output
}
